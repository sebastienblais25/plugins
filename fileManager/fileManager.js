/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./fileManager/loader.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./fileManager/apiConnect.ts":
/*!***********************************!*\
  !*** ./fileManager/apiConnect.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Connexion = /** @class */ (function () {\r\n    function Connexion() {\r\n    }\r\n    /**\r\n     * Get the structure of a repository from S3\r\n     * @param {string} token token of the user\r\n     * @param {string} urltogo the url for the API\r\n     * @returns {*} the list of folder and file\r\n     * @memberof Connexion\r\n     */\r\n    Connexion.prototype.connexionAPIFileManager = function (token, urltogo, operation, content, file) {\r\n        if (file === void 0) { file = ''; }\r\n        /********* API CALL **********/\r\n        return new Promise(function (resolve) {\r\n            $.ajax({\r\n                // URL of the API\r\n                url: urltogo,\r\n                // The header with token and contentYpe\r\n                headers: {\r\n                    'Authorization': \"Bearer \" + token,\r\n                    'contentType': content\r\n                },\r\n                // Type of the operation GET,POST ,PUT or DELETE\r\n                type: operation,\r\n                // The typ of the data\r\n                //dataType: 'json',\r\n                data: file,\r\n                processData: false,\r\n                // Send the data in the promise\r\n                success: function (data) { return resolve(data); }\r\n            });\r\n        });\r\n    };\r\n    Connexion.prototype.connexionAPIFileManagerTestDownload = function (token, urltogo, operation, content, file) {\r\n        if (file === void 0) { file = ''; }\r\n        /********* API CALL **********/\r\n        return new Promise(function (resolve) {\r\n            $.ajax({\r\n                // URL of the API\r\n                url: urltogo,\r\n                xhrFields: {\r\n                    responseType: 'blob'\r\n                },\r\n                // The header with token and contentYpe\r\n                headers: {\r\n                    'Authorization': \"Bearer \" + token,\r\n                    'contentType': content\r\n                },\r\n                // Type of the operation GET,POST ,PUT or DELETE\r\n                type: operation,\r\n                // The typ of the data\r\n                //dataType: 'json',\r\n                data: file,\r\n                processData: false,\r\n                // Send the data in the promise\r\n                success: function (data) { return resolve(data); }\r\n            });\r\n        });\r\n    };\r\n    return Connexion;\r\n}());\r\nexports.Connexion = Connexion;\r\n\n\n//# sourceURL=webpack:///./fileManager/apiConnect.ts?");

/***/ }),

/***/ "./fileManager/dragndrop.ts":
/*!**********************************!*\
  !*** ./fileManager/dragndrop.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.dragdropFunction = \"\\n<script>\\nfunction onDragOver(e) {\\n    e.preventDefault();  \\n    e.stopPropagation();\\n    $('.Geosys-drop-window').show();\\n    e.dataTransfer.dropEffect = \\\"move\\\";\\n}\\nfunction onDragEnter(e) {\\n    e.preventDefault();  \\n    e.stopPropagation();\\n} \\nfunction onDragLeave(e) {\\n    e.preventDefault();  \\n    e.stopPropagation();\\n    $('.Geosys-drop-window').hide();\\n}\\nfunction onDrop(e) {\\n    e.preventDefault();  \\n    e.stopPropagation();\\n    let dt = e.dataTransfer;\\n    let files = dt.files;\\n    $('.Geosys-drop-window').hide();\\n    fileInput.files = files\\n    $('#uploading').click();\\n}\\n</script>\\n\";\r\n\n\n//# sourceURL=webpack:///./fileManager/dragndrop.ts?");

/***/ }),

/***/ "./fileManager/fileMana.ts":
/*!*********************************!*\
  !*** ./fileManager/fileMana.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar apiConnect_1 = __webpack_require__(/*! ../fileManager/apiConnect */ \"./fileManager/apiConnect.ts\");\r\nvar FileSaver = __webpack_require__(/*! file-saver */ \"./node_modules/file-saver/dist/FileSaver.min.js\"); // le import\r\nvar FileMana = /** @class */ (function () {\r\n    /**\r\n     *Creates an instance of FileMana.\r\n     * @param {string} [nextFolder='root']\r\n     * @memberof FileMana\r\n     */\r\n    function FileMana(nextFolder) {\r\n        if (nextFolder === void 0) { nextFolder = 'root'; }\r\n        // Properties\r\n        this._conn = new apiConnect_1.Connexion();\r\n        this._breadcrumbs = '';\r\n        this._list = [];\r\n        this._nextFolder = nextFolder;\r\n        this._breadcrumbs = '...';\r\n    }\r\n    /**\r\n     * obtain the structure of a folder with a path send\r\n     * @param {User} log for the token\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.obtainArbo = function (token) {\r\n        this._nextFolder = '';\r\n        return this._conn.connexionAPIFileManager(token, this.setNavigation(this.getFolderFileList()), 'Get', 'application/json');\r\n    };\r\n    /**\r\n     * set the url for the navigation in the file manager\r\n     * @returns {string} return the url needed\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.setNavigation = function (urlgoto, adding) {\r\n        if (adding === void 0) { adding = ''; }\r\n        return this.getUrlServer() + urlgoto + this._breadcrumbs + adding + '/' + '&__example=' + this._breadcrumbs + adding + '/';\r\n    };\r\n    /**\r\n     * build a list of folder with the return of the API\r\n     * @returns return a list of folder\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.buildFolderList = function () {\r\n        var listFo = [];\r\n        // Build the list of folder for the user UI\r\n        for (var i in this._value.list_folder) {\r\n            listFo.push({ name: this._value.list_folder[i].name, modified: this._value.list_folder[i].last_modified, wanted: false });\r\n        }\r\n        return listFo;\r\n    };\r\n    /**\r\n     * build a list of file with the return of the API\r\n     * @returns return a list of file\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.buildFileList = function () {\r\n        var listFi = [];\r\n        // Build the list of folder for the user UI\r\n        for (var i in this._value.list_file) {\r\n            listFi.push({ name: this._value.list_file[i].name, size: this._value.list_file[i].size, modified: this._value.list_file[i].last_modified, wanted: false });\r\n        }\r\n        return listFi;\r\n    };\r\n    /**\r\n     * Build the template for the file manager\r\n     * @returns {string} return a template\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.buildUI = function () {\r\n        var output = \"\\n        <div ng-controller=\\\"fileManagerPanelCtrl as ctrl11\\\">\\n            <div class=\\\"Geosys-topcover\\\"></div>\\n            <div class=\\\"Geosys-sticky-Header\\\">\\n                <div class=\\\"Geosys-backing\\\" ng-click=\\\"ctrl11.precedent()\\\"><i class=\\\"material-icons\\\">arrow_back</i></div>\\n                <div class=\\\"Geosys-backing\\\" ng-click=\\\"ctrl11.refresh()\\\"><i class=\\\"material-icons\\\">refresh</i></div>\\n                <div class=\\\"Geosys-backing\\\" ng-click=\\\"ctrl11.createFolder()\\\"><i class=\\\"material-icons\\\">create_new_folder</i></div>\\n                <div class=\\\"Geosys-breadclass\\\">\" + this.buildClickablebreadcrumbs() + \"</div>\\n                <div class=\\\"Geosys-header-File\\\">\\n                    <span class=\\\"Geosys-name-File-Folder-Header\\\">Name</span> \\n                    <span class=\\\"Geosys-modified-File-Folder-Header\\\">Date modified</span>\\n                    <span class=\\\"Geosys-size-File-Folder-Header\\\">Size</span>\\n                </div>\\n            </div>\\n            <div id=\\\"div1\\\" ondragenter=\\\"onDragEnter(event);\\\"\\n            ondragover=\\\"onDragOver(event);\\\"\\n            ondragleave=\\\"onDragLeave(event);\\\"\\n            ondrop=\\\"onDrop(event);\\\">\\n            <form>\\n                <md-list-item class=\\\"Geosys-folderBtn\\\" ng-repeat=\\\"folder in ctrl11.folders\\\">\\n                    <div class=\\\"Geosys-groupingInfo\\\">\\n                        <div ng-click=\\\"ctrl11.openFolder(folder)\\\" style=\\\"width: 90%;margin: 0;float: left;\\\">\\n                            <md-icon>\\n                                <i class=\\\"material-icons\\\">\\n                                    folder\\n                                </i>\\n                            </md-icon>\\n                            \\n                            <span class=\\\"Geosys-name-File-Folder Geosys-lilPad\\\">{{ folder.name }}</span>\\n                            <span class=\\\"Geosys-modified-File-Folder Geosys-lilPad\\\">{{ folder.modified }}</span>\\n                        </div>\\n                        <div class=\\\"Geosys-downloadbtn\\\" ng-click=\\\"ctrl11.deleteFolder(folder)\\\"><i class=\\\"material-icons\\\">delete</i></div>\\n                        <div class=\\\"Geosys-downloadbtn\\\" ng-click=\\\"ctrl11.downloadFolder(folder)\\\"><i style=\\\"padding-top: 2px;\\\" class=\\\"material-icons\\\">get_app</i></div>\\n                    </div>\\n                </md-list-item>\\n                \\n                <md-list-item class=\\\"Geosys-fileBtn\\\" ng-repeat=\\\"file in ctrl11.files\\\">\\n                    <div class=\\\"Geosys-groupingInfo\\\">\\n                        <md-icon>\\n                            <i class=\\\"material-icons\\\">\\n                                insert_drive_file\\n                            </i>\\n                        </md-icon>\\n                        <span class=\\\"Geosys-name-File-Folder Geosys-lilPad\\\">{{ file.name }}</span> \\n                        <span class=\\\"Geosys-modified-File-Folder Geosys-lilPad\\\">{{ file.modified }}</span>\\n                        <span class=\\\"Geosys-size-File-Folder Geosys-lilPad\\\">{{ file.size }} KB</span>\\n                        <div class=\\\"Geosys-downloadbtn\\\" ng-click=\\\"ctrl11.deleteFile(file)\\\"><i class=\\\"material-icons\\\">delete</i></div>\\n                        <div class=\\\"Geosys-downloadbtn\\\" ng-click=\\\"ctrl11.downloadFile(file)\\\"><i style=\\\"padding-top: 2px;\\\" class=\\\"material-icons\\\">get_app</i></div>\\n                    </div>       \\n                </md-list-item>\\n                <div class=\\\"Geosys-hidden-upload\\\">\\n                    <input class=\\\"Geosys-hidden-upload\\\" type=\\\"file\\\"\\n                        id=\\\"fileInput\\\">\\n                    <md-button id=\\\"uploading\\\" ng-click=\\\"ctrl11.uploadFile();\\\" class=\\\"Geosys-hidden-upload\\\">Upload</md-button>\\n                </div>\\n            </form>\\n            </div>\\n            <div class=\\\"Geosys-drop-window\\\">\\n                <div class=\\\"Geosys-drop-window-content\\\">\\n                    <h3>Drop files to upload</h3>\\n                </div>\\n            </div>\\n        </div>\\n        \";\r\n        return output;\r\n    };\r\n    /**\r\n     * build a clickable breacrumbs for the navigations\r\n     * @returns return a string for the templates\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.buildClickablebreadcrumbs = function () {\r\n        this._list = this._breadcrumbs.split('/');\r\n        var bc = '';\r\n        var lenght = this._list.length - 1;\r\n        for (var i in this._list) {\r\n            if (i === lenght.toString()) {\r\n                bc += \"&nbsp;/<span class=\\\"Geosys-breadClick\\\">\" + this._list[i] + \"</span>\";\r\n            }\r\n            else {\r\n                bc += \"&nbsp/<span class=\\\"Geosys-breadClick\\\" ng-click=\\\"ctrl11.followup('\" + i + \"')\\\">\" + this._list[i] + \"</span>\";\r\n            }\r\n        }\r\n        return bc;\r\n    };\r\n    /**\r\n     * set the path needed to get into the good folder\r\n     * @param {string} rank wich folder we want to go in\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.setbreacrumbsForNav = function (rank) {\r\n        this._breadcrumbs = '';\r\n        for (var i in this._list) {\r\n            if (i < rank) {\r\n                this._breadcrumbs += this._list[i] + '/';\r\n            }\r\n            else if (i === rank) {\r\n                this._breadcrumbs += this._list[i];\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * set a formdata to the Api to upload a file\r\n     * @param {string} path the path of the file\r\n     * @param {string} token the token for the connection\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.uploadfile = function (path, token, file) {\r\n        var form = new FormData();\r\n        form.append('fichier', file);\r\n        this._conn.connexionAPIFileManager(token, this.setNavigation(this.getFileAction()), 'POST', 'application/json', form).then(function (values) {\r\n            if (values[0].message !== undefined) {\r\n                console.log('File uploaded');\r\n            }\r\n            else {\r\n                alert(values[0]);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * receive a blob dorm the APi to save the file into the download repository\r\n     * @param {string} nameFile name of the file\r\n     * @param {string} path the path of the file\r\n     * @param {string} token the token for the connection\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.downloadFile = function (nameFile, path, token) {\r\n        /***** API Call *****/\r\n        this._conn.connexionAPIFileManager(token, this.setNavigation(this.getFileAction(), nameFile), 'Get', 'application/octet-stream').then(function (values) {\r\n            /***** Download *****/\r\n            console.log(values);\r\n            alert(nameFile + ' downloaded from ' + path);\r\n            var blob = new Blob([values]);\r\n            FileSaver.saveAs(blob, nameFile);\r\n        });\r\n    };\r\n    /**\r\n     * to delete a file in the repository S3\r\n     * @param {string} nameFile name of the file\r\n     * @param {string} path the path of the file\r\n     * @param {string} token the token for the connection\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.deleteFile = function (nameFile, path, token) {\r\n        /***** API Call *****/\r\n        var dlFile = this._conn.connexionAPIFileManager(token, this.setNavigation(this.getFileAction(), nameFile), 'Delete', 'application/json').then(function (values) {\r\n            console.log(dlFile);\r\n            alert(nameFile + ' deleted from ' + path);\r\n        });\r\n    };\r\n    /**\r\n     * Download a folder with an API call and a zip file\r\n     * @param {string} nameFolder take the name of the folder\r\n     * @param {string} path take the path of the folder\r\n     * @param {string} token put the token for the API\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.downloadFolder = function (nameFolder, path, token) {\r\n        /***** API Call *****/\r\n        this._conn.connexionAPIFileManager(token, this.setNavigation(this.getFolderAction(), nameFolder), 'POST', 'application/octet-stream').then(function (values) {\r\n            /***** Download *****/\r\n            console.log(nameFolder + ' downloaded from ' + path);\r\n            var blob = new Blob([values[0]] /*,{type:\"application/json\"}*/);\r\n            FileSaver.saveAs(blob, nameFolder + '.zip');\r\n        });\r\n    };\r\n    /**\r\n     * Delete a folder in S/ with an API call\r\n     * @param {string} nameFolder the name of the folder to delete\r\n     * @param {string} path\r\n     * @param {string} token\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.deleteFolder = function (nameFolder, path, token) {\r\n        /***** API Call *****/\r\n        this._conn.connexionAPIFileManager(token, this.setNavigation(this.getFolderAction(), nameFolder), 'POST', 'application/json').then(function (values) {\r\n            // Check if the operation is completed\r\n            if (values[0].message !== undefined) {\r\n                console.log(nameFolder + ' deleted from ' + path);\r\n            }\r\n            else {\r\n                alert(values[0]);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Create a folder in S3 with an API call\r\n     * @param {string} pathforfolder the path to add a folder\r\n     * @param {string} token the token for the API\r\n     * @param {string} foldername the new folder name\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.createFolder = function (pathforfolder, token, foldername) {\r\n        /***** API Call *****/\r\n        this._conn.connexionAPIFileManager(token, this.setNavigation(this.getFolderAction(), foldername), 'POST', 'application/json').then(function (values) {\r\n            // Check if the operation is completed\r\n            if (values[0].message !== undefined) {\r\n                console.log(\"the new folder \" + foldername + \" will be created in \" + pathforfolder);\r\n            }\r\n            else {\r\n                alert(values[0]);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Set all the url from the config or the parameter of the function\r\n     * @param {*} config Url in the config\r\n     * @param {string} [urlServer=''] Url\r\n     * @param {string} [folderFile=''] Url\r\n     * @param {string} [folder=''] Url\r\n     * @param {string} [file=''] Url\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.setUrl = function (config, urlServer, folderFile, folder, file) {\r\n        if (urlServer === void 0) { urlServer = ''; }\r\n        if (folderFile === void 0) { folderFile = ''; }\r\n        if (folder === void 0) { folder = ''; }\r\n        if (file === void 0) { file = ''; }\r\n        // Set the url for the server\r\n        if (urlServer !== '') {\r\n            this._urlServer = urlServer;\r\n        }\r\n        else {\r\n            this._urlServer = config.Server;\r\n        }\r\n        // Set the url for the navigation\r\n        if (folderFile !== '') {\r\n            this._folderFileList = folderFile;\r\n        }\r\n        else {\r\n            this._folderFileList = config.FolderFileList;\r\n        }\r\n        // Set the url for the folder operation\r\n        if (folder !== '') {\r\n            this._folderAction = folder;\r\n        }\r\n        else {\r\n            this._folderAction = config.FolderAction;\r\n        }\r\n        // Set the url for the file operation\r\n        if (file !== '') {\r\n            this._fileAction = file;\r\n        }\r\n        else {\r\n            this._fileAction = config.FileAction;\r\n        }\r\n    };\r\n    /**\r\n     * TO DO : Maybe Added feature in the future\r\n     * @memberof FileMana\r\n     */\r\n    FileMana.prototype.uploadFolder = function () {\r\n    };\r\n    /******* Accessor *******/\r\n    // Conn\r\n    FileMana.prototype.getConn = function () {\r\n        return this._conn;\r\n    };\r\n    FileMana.prototype.setConn = function (value) {\r\n        this._conn = value;\r\n    };\r\n    // Breadcrumbs\r\n    FileMana.prototype.getBreadcrumbs = function () {\r\n        return this._breadcrumbs;\r\n    };\r\n    FileMana.prototype.setBreadcrumbs = function (value) {\r\n        this._breadcrumbs = value;\r\n    };\r\n    // Last Folder\r\n    FileMana.prototype.getLastFolder = function () {\r\n        return this._lastFolder;\r\n    };\r\n    FileMana.prototype.setLastFolder = function (value) {\r\n        this._lastFolder = value;\r\n    };\r\n    // Live Folder\r\n    FileMana.prototype.getLiveFolder = function () {\r\n        return this._liveFolder;\r\n    };\r\n    FileMana.prototype.setLiveFolder = function (value) {\r\n        this._liveFolder = value;\r\n    };\r\n    // Next Folder\r\n    FileMana.prototype.getNextFolder = function () {\r\n        return this._nextFolder;\r\n    };\r\n    FileMana.prototype.setNextFolder = function (next) {\r\n        this._nextFolder = next;\r\n    };\r\n    // Value\r\n    FileMana.prototype.getValue = function () {\r\n        return this._value;\r\n    };\r\n    FileMana.prototype.setValue = function (value) {\r\n        this._value = value;\r\n    };\r\n    // List\r\n    FileMana.prototype.getList = function () {\r\n        return this._list;\r\n    };\r\n    FileMana.prototype.setList = function (value) {\r\n        this._list = value;\r\n    };\r\n    FileMana.prototype.getUrlServer = function () {\r\n        return this._urlServer;\r\n    };\r\n    FileMana.prototype.getFolderFileList = function () {\r\n        return this._folderFileList;\r\n    };\r\n    FileMana.prototype.getFolderAction = function () {\r\n        return this._folderAction;\r\n    };\r\n    FileMana.prototype.getFileAction = function () {\r\n        return this._fileAction;\r\n    };\r\n    return FileMana;\r\n}());\r\nexports.FileMana = FileMana;\r\n\n\n//# sourceURL=webpack:///./fileManager/fileMana.ts?");

/***/ }),

/***/ "./fileManager/fileManagerC.ts":
/*!*************************************!*\
  !*** ./fileManager/fileManagerC.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar dragndrop_1 = __webpack_require__(/*! ../fileManager/dragndrop */ \"./fileManager/dragndrop.ts\");\r\nvar FileManagerController = /** @class */ (function () {\r\n    function FileManagerController() {\r\n    }\r\n    /**\r\n     * Create the first panel for the with the root\r\n     * @param {User} log for the token and other useful tools\r\n     * @param {*} mapApi The object of the API\r\n     * @param {FileMana} tfm the object File Manager to keep where you are in a repository\r\n     * @memberof FileManagerController\r\n     */\r\n    FileManagerController.prototype.fileManagercontrols = function (token, mapApi, tfm, panel) {\r\n        var _this = this;\r\n        //if the panel already exist\r\n        this.panel = panel;\r\n        //title on the panel\r\n        this.panel.header.title = \"File Manager (Alpha testing)\";\r\n        var fmc = new FileManagerController();\r\n        //build the UI for the file manager\r\n        var output = tfm.buildUI() + dragndrop_1.dragdropFunction;\r\n        if (tfm.getNextFolder() == 'root') {\r\n            tfm.obtainArbo(token).then(function (values) {\r\n                tfm.setValue(values);\r\n                fmc.FileManaManager(token, mapApi, tfm, _this.panel);\r\n                _this.panel.body = output;\r\n            });\r\n        }\r\n        this.panel.open();\r\n    };\r\n    ;\r\n    /**\r\n     * Create the panel body when a folder is clicked\r\n     * @param {User} log User tools\r\n     * @param {*} mapApi the map Object\r\n     * @param {FileMana} tfm to keep track where you are\r\n     * @param {*} panel the panel to add the body\r\n     * @memberof FileManagerController\r\n     */\r\n    FileManagerController.prototype.FileManaManager = function (token, mapApi, tfm, panel) {\r\n        mapApi.agControllerRegister('fileManagerPanelCtrl', function () {\r\n            var _this = this;\r\n            //building the list of folder and file\r\n            this.folders = [];\r\n            this.files = [];\r\n            this.breadcrumbs = tfm.getBreadcrumbs();\r\n            this.folders = tfm.buildFolderList();\r\n            this.files = tfm.buildFileList();\r\n            //click on the left arrow to back one folder\r\n            this.precedent = function () {\r\n                var rank = tfm.getList().length - 2;\r\n                if (rank >= 0) {\r\n                    tfm.setbreacrumbsForNav(rank.toString());\r\n                    var fmc_1 = new FileManagerController();\r\n                    var output_1 = tfm.buildUI() + dragndrop_1.dragdropFunction;\r\n                    tfm.obtainArbo(token).then(function (values) {\r\n                        tfm.setValue(values);\r\n                        fmc_1.FileManaManager(token, mapApi, tfm, panel);\r\n                        panel.body = output_1;\r\n                    });\r\n                }\r\n            };\r\n            //refresh the folder \r\n            this.refresh = function () {\r\n                var fmc = new FileManagerController();\r\n                var output = tfm.buildUI() + dragndrop_1.dragdropFunction;\r\n                tfm.obtainArbo(token).then(function (values) {\r\n                    tfm.setValue(values);\r\n                    fmc.FileManaManager(token, mapApi, tfm, panel);\r\n                    panel.body = output;\r\n                });\r\n            };\r\n            //open the folder from the breadcrumbs\r\n            this.followup = function (folder) {\r\n                tfm.setbreacrumbsForNav(folder);\r\n                var fmc = new FileManagerController();\r\n                var output = tfm.buildUI() + dragndrop_1.dragdropFunction;\r\n                tfm.obtainArbo(token).then(function (values) {\r\n                    tfm.setValue(values);\r\n                    fmc.FileManaManager(token, mapApi, tfm, panel);\r\n                    panel.body = output;\r\n                });\r\n            };\r\n            //open a folder when clicked\r\n            this.openFolder = function (folder) {\r\n                tfm.setNextFolder(folder.name);\r\n                tfm.setBreadcrumbs(tfm.getBreadcrumbs() + '/' + tfm.getNextFolder());\r\n                var fmc = new FileManagerController();\r\n                var output = tfm.buildUI() + dragndrop_1.dragdropFunction;\r\n                tfm.obtainArbo(token).then(function (values) {\r\n                    tfm.setValue(values);\r\n                    fmc.FileManaManager(token, mapApi, tfm, panel);\r\n                    panel.body = output;\r\n                });\r\n            };\r\n            //download file on download button clicked\r\n            this.downloadFile = function (file) {\r\n                tfm.downloadFile(file.name, tfm.getBreadcrumbs(), token);\r\n            };\r\n            //delete file on delete button clicked\r\n            this.deleteFile = function (file) {\r\n                tfm.deleteFile(file.name, tfm.getBreadcrumbs(), token);\r\n            };\r\n            //download file on download button clicked\r\n            this.downloadFolder = function (folder) {\r\n                tfm.downloadFolder(folder.name, tfm.getBreadcrumbs(), token);\r\n            };\r\n            //delete file on delete button clicked\r\n            this.deleteFolder = function (folder) {\r\n                tfm.deleteFolder(folder.name, tfm.getBreadcrumbs(), token);\r\n            };\r\n            //create a new folder\r\n            this.createFolder = function () {\r\n                if (!_this.panel1) {\r\n                    // make sure both header and body have a digest cycle run on them\r\n                    _this.panel1 = mapApi.panels.create('AddFolder');\r\n                    _this.panel1.element.css({\r\n                        bottom: '0em',\r\n                        width: '300px',\r\n                        height: '200px'\r\n                    });\r\n                    _this.panel1.element.css({ top: '0px;', margin: '200px 50px 100px 650px' });\r\n                    _this.panel1.header.closeButton;\r\n                    _this.panel1.header.title = \"Add Folder\";\r\n                    var fmc = new FileManagerController();\r\n                    fmc.addingFolder(token, tfm, mapApi, _this.panel1);\r\n                    var output = \"<div ng-controller=\\\"folderCtrl as ctrl16\\\">\\n                    <md-input-container style=\\\"margin-bottom: 0px;height: 34px; width:275px; \\\">\\n                        <label>Name the folder</label>\\n                        <input type=\\\"text\\\" ng-model=\\\"ctrl16.nameFolder\\\"/>\\n                    </md-input-container>\\n                    <md-input-container style=\\\"float:right;\\\">\\n                        <md-button class=\\\"md-raised\\\" ng-click=\\\"ctrl16.addfolder()\\\">\\n                            add Folder\\n                        </md-button>\\n                    </md-input-container>\\n                    </div>\";\r\n                    _this.panel1.body = output;\r\n                }\r\n                else {\r\n                    _this.panel1.close();\r\n                }\r\n                _this.panel1.open();\r\n            };\r\n            //upload file on drag and drop of file\r\n            this.uploadFile = function () {\r\n                var file = document.getElementById('fileInput').files[0];\r\n                tfm.uploadfile(tfm.getBreadcrumbs(), token, file);\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * The panel to name the new folder and add the new folder in thje directory\r\n     * @param {string} token\r\n     * @param {FileMana} tfm\r\n     * @param {*} mapApi\r\n     * @memberof FileManagerController\r\n     */\r\n    FileManagerController.prototype.addingFolder = function (token, tfm, mapApi, panel) {\r\n        mapApi.agControllerRegister('folderCtrl', function () {\r\n            var _this = this;\r\n            this.addfolder = function () {\r\n                tfm.createFolder(tfm.getBreadcrumbs(), token, _this.nameFolder);\r\n                panel.close();\r\n            };\r\n        });\r\n    };\r\n    return FileManagerController;\r\n}());\r\nexports.FileManagerController = FileManagerController;\r\n\n\n//# sourceURL=webpack:///./fileManager/fileManagerC.ts?");

/***/ }),

/***/ "./fileManager/index.ts":
/*!******************************!*\
  !*** ./fileManager/index.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar fileManagerC_1 = __webpack_require__(/*! ../fileManager/fileManagerC */ \"./fileManager/fileManagerC.ts\");\r\nvar fileMana_1 = __webpack_require__(/*! ../fileManager/fileMana */ \"./fileManager/fileMana.ts\");\r\nvar FileManager = /** @class */ (function () {\r\n    function FileManager() {\r\n    }\r\n    /**\r\n     * Initialize the plugins into the viewer\r\n     * @param {*} api Ramp API\r\n     * @memberof FileManager\r\n     */\r\n    FileManager.prototype.init = function (api) {\r\n        // Set la variable api pour le plugin\r\n        this.mapApi = api;\r\n        // Set _RV\r\n        this.config = this._RV.getConfig('plugins').fileManager;\r\n        // Set la langue pour le plugin\r\n        this.config.language = this._RV.getCurrentLang();\r\n        // Set la config pour la geometry\r\n        this.config.url = this._RV.getConfig('services').geometryUrl;\r\n        // Création d'un button d'accès à partir du menu\r\n        this.button = this.mapApi.mapI.addPluginButton(FileManager.prototype.translations[this._RV.getCurrentLang()].filem, this.onMenuItemClick());\r\n        // Ajoute un panel\r\n    };\r\n    /**\r\n     * Add a button in the side to open the plugins and close this side menu\r\n     * @returns\r\n     * @memberof FileManager\r\n     */\r\n    FileManager.prototype.onMenuItemClick = function () {\r\n        var _this = this;\r\n        return function () {\r\n            _this.button.isActive = !_this.button.isActive;\r\n            // Alert(this.mapApi.layer);\r\n            _this._RV.toggleSideNav('close');\r\n            // Open the panel\r\n            _this.addLoginPanel();\r\n        };\r\n    };\r\n    /**\r\n     * Création du panel pour le plugins et ensuite ajoute le formulaire pou la connexion\r\n     * de l'utilisateur\r\n     * @memberof FileManager\r\n     */\r\n    FileManager.prototype.addLoginPanel = function () {\r\n        if (!this.panel) {\r\n            // make sure both header and body have a digest cycle run on them\r\n            this.panel = this.mapApi.panels.create('FileManager');\r\n            //Size of the panel\r\n            this.panel.element.css({ top: '0px;', margin: '100px 50px 100px 450px' });\r\n            //button in the header of the panel\r\n            this.panel.header.toggleButton;\r\n            this.panel.header.closeButton;\r\n        }\r\n        else {\r\n            this.panel.close();\r\n        }\r\n        var tfm = new fileMana_1.FileMana();\r\n        tfm.setUrl(this.config);\r\n        var mainFile = new fileManagerC_1.FileManagerController();\r\n        mainFile.fileManagercontrols('hello', this.mapApi, tfm, this.panel);\r\n    };\r\n    /**\r\n     * Compile a html template to read to compile and replace all the variable inside the template\r\n     * @param {*} template The html template to compile\r\n     * @param {*} mapApi The API of the viewer to compile it(service angular)\r\n     * @returns {JQuery<HTMLElement>}\r\n     * @memberof FileManager\r\n     */\r\n    FileManager.prototype.compileTemplate = function (template, mapApi) {\r\n        var temp = $(template);\r\n        mapApi.$compile(temp);\r\n        return temp;\r\n    };\r\n    return FileManager;\r\n}());\r\nexports.default = FileManager;\r\n;\r\n;\r\n// Translate label\r\nFileManager.prototype.translations = {\r\n    'en-CA': {\r\n        // Commun\r\n        // file manager\r\n        filem: 'File manager (Alpha)',\r\n    },\r\n    'fr-CA': {\r\n        // Commun\r\n        // file manager\r\n        filem: 'Explorateur de fichier (Alpha)',\r\n    }\r\n};\r\n// Ajout du plugins à l'application\r\nwindow.fileManager = FileManager;\r\n\n\n//# sourceURL=webpack:///./fileManager/index.ts?");

/***/ }),

/***/ "./fileManager/loader.js":
/*!*******************************!*\
  !*** ./fileManager/loader.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.ts */ \"./fileManager/index.ts\");\n/* harmony import */ var _index_ts__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_index_ts__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _main_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main.scss */ \"./fileManager/main.scss\");\n/* harmony import */ var _main_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_main_scss__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\n\n//# sourceURL=webpack:///./fileManager/loader.js?");

/***/ }),

/***/ "./fileManager/main.scss":
/*!*******************************!*\
  !*** ./fileManager/main.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./fileManager/main.scss?");

/***/ }),

/***/ "./node_modules/file-saver/dist/FileSaver.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/file-saver/dist/FileSaver.min.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Depricated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(b,c,d){var e=new XMLHttpRequest;e.open(\"GET\",b),e.responseType=\"blob\",e.onload=function(){a(e.response,c,d)},e.onerror=function(){console.error(\"could not download file\")},e.send()}function d(a){var b=new XMLHttpRequest;return b.open(\"HEAD\",a,!1),b.send(),200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.saveAs||\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(a,b,d,e){if(e=e||open(\"\",\"_blank\"),e&&(e.document.title=e.document.body.innerText=\"downloading...\"),\"string\"==typeof a)return c(a,b,d);var g=\"application/octet-stream\"===a.type,h=/constructor/i.test(f.HTMLElement)||f.safari,i=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((i||g&&h)&&\"object\"==typeof FileReader){var j=new FileReader;j.onloadend=function(){var a=j.result;a=i?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),e?e.location.href=a:location=a,e=null},j.readAsDataURL(a)}else{var k=f.URL||f.webkitURL,l=k.createObjectURL(a);e?e.location=l:location.href=l,e=null,setTimeout(function(){k.revokeObjectURL(l)},4E4)}};f.saveAs=a.saveAs=a, true&&(module.exports=a)});\n\n//# sourceMappingURL=FileSaver.min.js.map\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/file-saver/dist/FileSaver.min.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })

/******/ });